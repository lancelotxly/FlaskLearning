列: 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。
行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。
主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据
外键：外键用于关联两个表。
索引：使用索引可快速访问数据库表中的特定信息。
     索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录


数据类型：数值，时间，字符串
数值： INT # 4, DOUBLE # 8
时间： DATE(YYYY-MM-DD), TIME(HH:MM:SS), YEAR(YYYY), DATETIME(YYYY-MM-DD HH:MM:SS)
字符串： VARCHAR(max) # 变长
        UTF-8 # 3, GBK # 2

创建、删除、选择数据库
create database test;
create database test2;
drop database test2;
use test;

建表/删表
create table if not exist user (id INT primary key, name VARCHAR(20) not null, phone VARCHAR(20) unique, score DOUBLE index);
drop table user;
增
insert into user (id, name, phone, score) value (1, 'xzq', '15951917****', 99);
insert inot user (id, name, score) value (1, 'lxy', 100);
删
delete from user  # 删除整表
delete from user where id=1;
改
update user set score = 99 where id = 1;
查
select * from user; # 查询整表
select id, phone, score from user where name='xzq';

修改表结构
增加一个字段
alter table user add column (score INT);
在指定字段后增加一个字段
alter table user add column score INT after id;
删除一个字段
alter table user drop score;
修改一个字段
alter table user change score to lover VARCHAR(20);
修改表名
alter table user rename to student;

清空表
truncate table user;


-******************************************************************************-
sql基础：
      1. 分类
         DDL(Data Definition Language): 定义了不同的数据段、数据库、表、列、索引等数据库对象的定义
                                        create, drop, alter
                                        DDL 是对数据库内部的对象进行增，删，改
         DML(Data Manipulation Language): 增删改查
                                         insert, delete, update, select
                                         DML 只是对表内部数据的操作，而不涉及到表的定义、结构的修改，更不会涉及到其他对象
         DCL(Data Control Language): 定义了数据库、表、字段、用户的访问权限和安全级别
                                     grant, revoke


      DDL: 针对数据库，表以及字段的操作
             1.创建数据库
               CREATE DATABASE dbname;
               USE dbname; # 使用 'dbname'数据库
               SHOW tables; # 获取 'dbname'中的表
             2.删除数据库
               DROP DATABASE dbname;

             # column_define = column_name column_type constraint
             col_type: 数据类型
                       数值： INT # 4字节, DOUBLE(M,D) # 8字节, (M,D)可选, M 数据总长, D 小数位总长
                       时间： DATETIME(YYYY-MM-DD HH:MM:SS), DATE(YYYY-MM-DD), TIME(HH:MM:SS), YEAR(YYYY),
                       字符串： VARCHAR(max) # 变长
                               UTF-8 # 3, GBK # 2
             constraint: primary key(唯一且不为空，一个表只能有一个主键),
                         unique(唯一可为空)
                         not null
             Foreign key:  类似于函数解耦，例如要创立一张表，来记录学生的个人信息和成绩，就会显得冗余;
                           利用外键约束可以创建一张父表来记录学生的信息, 再创建一张子表(包含父表的外键，即子表中指向父表主键的字段)来记录成绩
                           创建要求:   1. 子表的非主键-->父表的唯一键（或主键）
                                      2. 该非主键为父表的外键
                           语法:
                           CREATE TABLE Student(id int primary key, name varchar(20));  # 父表
                           CREATE TABLE Score(id int, score int,
                           CONSTRAINT id_fk Foreign key (score.id) References Student(Student.id)
                           on update cascade   # [update/delete] cascade 父表更新/删除时，子表对应更新删除
                           on delete restrict  # [delete] restrict 父表删除时， 子表有对应记录不允许删除
                           );

                           # 增加一个外键
                           ALTER TABLE child-table_name ADD
                           CONSTRAINT col_fk FOREIGN KEY (child.col) REFERENCES father_name (father.col);

                           约束:  1. 父表删除某个id, 必须保证子表没有引用该id
                                 2. 子表插入某id，必须保证父表中有该id
                                 3. 子表id必须与父表id 类型相同
                                 4. 父表的外键必须是唯一键

                           # 外键仅仅是保证数据的正确性，不能为增删改查提供帮助

             Index:   没有索引查询会变的非常缓慢, InnoDB 索引类型为BTREE INDEX
                  索引类型:
                       1.普通/(唯一)索引  # 主键索引即 primary key
                       # 创建
                       CREATE TABLE Student (id int(3) primary key, name varchar(20),
                       [UNIQUE] INDEX (name(20))
                       );
                       # 增加/删除
                       ALERT TABLE Student ADD INDEX(name(20));
                       ALERT TABLE Student DROP INDEX name;

                       2. 组合索引
                       CREATE TABLE Student (id int(3), name varchar(20), age int(3),
                       INDEX(id,name,age);
                       )
                       相当于创建了 id,name,age;  id,name;  id,age; id的索引

                  索引设计原则:
                       1. 最适合的索引列, 出现在WHERE中和连接句子中的列
                       2. 使用唯一索引，索引列的基数越大，索引效果越好，因此往往用unique列做索引
                       3. 使用短索引，尽量缩短index(col(length))的length
                       4. 使用组合索引

             InnoDB创建表时，保存顺序: 1. 按主键顺序保存
                                   2.  没有主键按唯一索引保存
                                   3. 没有主键且没有唯一索引，会生成的一个内部列， 按内部列顺序保存
                     # 因此，InnoDB尽量自己指定主键, 且选用常访问的唯一列作为主键
             3.创建表
               CREATE TABLE IF NOT EXIST table_name(column_define_1,...column_define_N);
               DESC table_name; # 查看表
               SHOW CREATE TABLE table_name # 查看创建过程, 包括sql语句, 使用的engine和charset
             4.删除表
               DROP TABLE table_name;
             5.修改表
               # 字段
               1) 修改一个字段
               ALTER TABLE table_name MODIFY COLUMN column_name column_type constraint(可缺省)
               2) 字段重写
               ALTER TABLE table_name CHANGE COLUMN column_name column_define;
               3) 增加一个字段
               ALTER TABLE table_name ADD COLUMN column_define column_name;  # 尾插
               ALTER TABLE table_name ADD COLUMN column_define AFTER column_name;  # column_name后插
               ALTER TABLE table_name ADD COLUMN column_define FIRST;  # 头插

               # 增加一个外键
               ALTER TABLE child-table_name ADD CONSTRAINT col_fk FOREIGN KEY (child.col) REFERENCES father_name (father.col);
               *****
			   ALTER TABLE table_name [MODIFY/ADD/CHANGE] col_name column_define
			   4) 删除一个字段
               ALTER TABLE table_name DROP COLUMN column_name;
               # 修改表
               ALTER TABLE table_name RENAME new_name;




      DML: 针对具体每个数据的操作
          1. 增加
             INSERT INTO table_name (col_name1, col_nam2,...) VALUES (value_A1,value_A2,...),(value_B1,value_B2,...)
             # col_name 和 (value1,...) 视情况皆可缺省

          2. 更改
             UPDATE table_name_a as a,... SET a.col_name=value WHERE CONDITION1,...

          3. 删除
             DELETE FROM table_name WHERE CONDITION;

          4. 查询
			 SELECT [DISTINCT] col_name1,... FROM table_name [ORDER BY] col_nam [DESC/ASC][LIMIT start,row_count] WHERE [CONDITION1,...]
          
		  5. 聚合
             SELECT [col_name1,...] fun_name(col_name1),fun_name(col_2),... FROM table_name [WHERE CONDITION1 AND CONDITION2,,] [GROUP BY col_name1,col_name2..[WITH ROLLUP]][HAVING CONDITION1,,,];
			 1) [GROUP BY col_name1,col_name2..[WITH ROLLUP]]将表按col_1,,,col_n聚在一起  (可缺省，缺省时按整张原表聚合)
			 2）SELECT [col_name1,...] fun_name(col_name) 提取col_1,,,col_n，并计算fun_name(col_name),合为一张表展现 ([col_1,,,,]可缺省，缺省时只展现fun_name(col_1),...)
             3）[WITH ROLLUP]] 对聚合后 fun_name(col_name)结果再汇总 (可缺省)
			 4）[HAVING CONDITION1],, 对合成的表再根据CONDITION1,,,展现 (可缺省)
			 # fun_name :  count(col_1) # 计数
			               sum(col_1) # 求和
						   max(col_1)/min(col_1) # 最大最小
			 
			 
		  6.连接
            内连接: 选出两表互相匹配的内容 
			  SELECT col_1,col_2,... FROM table_A, table_B WHERE table_A.no=table_B.no	
            外连接：
			1) left join  # 左边包含多余项
              SELECT col_1,col_2,... FROM table_A LEFT JOIN table_B ON table_A.no=table_B.no			
			2) right join # 右边包含多余项
			  SELECT col_1,col_2,... from table_A RIGHT JOIN table_B ON table_A.no=table_B.no			
          
		  7. 子查询
		     查询条件与另一个select语句结果有关。e.g in, not in, =, !=, exist, not exist
			 e.g. SELECT col_1,... FROM table_A where table_A.no in(SELECT col_1,.. from table_B);
			 子查询和表连接可以相互转化，表连接优于子查询

          8. 联合
             选出两表中的项(一般时共同项)合并。
             SELECT col_1,... FROM table_A UNION(# 去重)/ UNION ALL SELECT col_1,... FROM table_B UNION/UNION ALL.....			 

      视图: 对select语句的封装， 将select出来的列做成一张虚拟的表
                   1. 创建视图
                   CREATE VIEW view_name AS
                   SELECT col_1,... FROM table_name WHERE CONDITIONS   # select 语句
                   [WITH [CASCADED/LOCAL] CHECK OPTION]
                   创建要求: 1. 不能聚合GROUP BY, HAVING
                               不能去重DISTINCT
                           2. 不能包含子查询
                           3. 视图可以嵌套,即
                           CREATE VIEW view_name2 AS SELECT col_1,.. FROM view_name WHERE CONDITIONS
                           但不能FROM一个不能更新的视图
                   WITH CASCADED CHECK OPTION 更新视图时，所有嵌套的子视图的条件都要满足
                   WITH LOCAL CHECK OPTION 更新视图时，只需要满足当前子视图的条件

                   2. 修改视图
                   ALTER VIEW view_name (col_1,..all) AS
                   SELECT FROM col_1,.. FROM table/view WHERE CONDITIONS;

                   3. 删除视图
                   DROP VIEW view_name;



      运算符： 算法运算符 +, -, *, /, %
	         比较运算符 =, !=, <, >, >=, <=, BETWEEN, IN, LIKE(# 通用字符匹配), RLIKE(# 正则表达式匹配)
	                  BETWEEN:  a BETWEEN min AND max, 当 min<=a<=max 返回1， 否则返回0
	                  IN:    a IN (set) 当 a\in set 返回1， 否则返回0
	                  LIKE:  a LIKE %123% 当a 中包含 ‘123’ 返回1, 否则返回0

	         逻辑运算  &&, ||, !


	  函数:  字符串函数
	        cancat(s1,s2,...)  # 's1+s2,...' 连接字符串
	        insert(str,x,y,instr) # str第x~x+y, 替换为instr
	        replace(str,a,b) # 替换所有a为b
	        substring(str,x,y) # 取子串x~x+y
	        ltrim(str) # 去左空格
	        rtrim(str) # 去右空格
	        trim(str)  # 去左右空格

	        数值函数
	        abs(x), truncate(x,y) # 截断x,取y位小数

	        流程函数:
	        IF(condition,t,f) # 如果condition成立 返回t, 否则返回f
	        IF(a,b)  # 如果a=null, 返回b
	        CASE WHEN condition THEN result1 ELSE result2 END # if..else..





Mysql Engine: MyISAM, InnoDB(仅其支持事物和外键), Memory, Merge
            事务: 主要用于处理操作量大，复杂度高的数据。
                 比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个事务
                 事物必须满足:ACID(Atomicity, Consistency, Isolation, Durability)
                           Atomicity: 一个事务（transaction）中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。
                                      事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样.
                           Consistency: 在事务开始之前和事务结束以后，数据库的完整性没有被破坏.
                           Isolation: 数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致
                           Durability: 事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失


            设置Engine:  CREATE TABLE table_name (...) ENGINE=[MyISAM/InnoDB/Memory/Merge]

                      MyISAM: 不支持事物，不支持外键，访问快
                              静态表存储， 占中空间多，但易于数据恢复
                              适合read, insert, 少update, delete

                      InnoDB: 支持事物，外键，共享表空间存储（或 多表空间存储，表结构存储，数据和索引单独保存）
                             处理事物，并发

                      Memory: 使用内存创建表，HASH索引，数据易丢失
                              常用于更新不太频繁的小表，用以快速得到访问结果



